{"ast":null,"code":"import Tone from 'tone'; // function seq1(synth) {\n//   let seq = new Tone.Sequence(\n//     function(time, note) {\n//       console.log(time, note)\n//       //straight quater notes\n//       synth.triggerAttackRelease(note, '10hz', time)\n//     },\n//     ['A0 C1 E1', 'F0 A0 C1', 'G0 B0 D1', 'D0 F0 A0', 'E0 G0 B0']\n//   )\n//   return seq\n// }\n\nconsole.clear(); // UPDATE: there is a problem in chrome with starting audio context\n//  before a user gesture. This fixes it.\n\nfunction seq1(synth) {\n  var started = false;\n  document.documentElement.addEventListener('mousedown', function () {\n    if (started) return;\n    started = true;\n    var $inputs = document.querySelectorAll('input'),\n        chords = ['A0 C1 E1', 'F0 A0 C1', 'G0 B0 D1', 'D0 F0 A0', 'E0 G0 B0'].map(formatChords);\n    console.log(chords);\n    var chordIdx = 0,\n        step = 0;\n    var synth = new Tone.Synth();\n    var gain = new Tone.Gain(0.7);\n    synth.oscillator.type = 'sine';\n    gain.toMaster();\n    synth.connect(gain);\n    Array.from($inputs).forEach(function ($input) {\n      $input.addEventListener('change', function () {\n        if ($input.checked) handleChord($input.value);\n      });\n    });\n\n    function handleChord(valueString) {\n      chordIdx = parseInt(valueString) - 1;\n    }\n\n    Tone.Transport.scheduleRepeat(onRepeat, '16n');\n    Tone.Transport.start();\n    Tone.Transport.bpm.value = 90;\n\n    function onRepeat(time) {\n      var chord = chords[chordIdx],\n          note = chord[step % chord.length];\n      synth.triggerAttackRelease(note, '16n', time);\n      step++;\n    } // DOWN THE LINE THIS WILL MAKE THINGS EASIER\n\n\n    function formatChords(chordString) {\n      var chord = chordString.split(' ');\n      var arr = [];\n\n      for (var i = 0; i < 2; i++) {\n        for (var j = 0; j < chord.length; j++) {\n          var noteOct = chord[j].split(''),\n              note = noteOct[0];\n          var oct = noteOct[1] === '0' ? i + 4 : i + 5;\n          note += oct;\n          arr.push(note);\n        }\n      }\n\n      return arr;\n    }\n  });\n}\n\nexport { seq1 };","map":{"version":3,"sources":["/Users/bitterglaze/Share/hseadc2017_THEREMINVOX/app/javascript/components/tunes/sequences.js"],"names":["Tone","console","clear","seq1","synth","started","document","documentElement","addEventListener","$inputs","querySelectorAll","chords","map","formatChords","log","chordIdx","step","Synth","gain","Gain","oscillator","type","toMaster","connect","Array","from","forEach","$input","checked","handleChord","value","valueString","parseInt","Transport","scheduleRepeat","onRepeat","start","bpm","time","chord","note","length","triggerAttackRelease","chordString","split","arr","i","j","noteOct","oct","push"],"mappings":"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","sourcesContent":["import Tone from 'tone'\n\n// function seq1(synth) {\n//   let seq = new Tone.Sequence(\n//     function(time, note) {\n//       console.log(time, note)\n//       //straight quater notes\n//       synth.triggerAttackRelease(note, '10hz', time)\n//     },\n//     ['A0 C1 E1', 'F0 A0 C1', 'G0 B0 D1', 'D0 F0 A0', 'E0 G0 B0']\n//   )\n//   return seq\n// }\n\nconsole.clear()\n\n// UPDATE: there is a problem in chrome with starting audio context\n//  before a user gesture. This fixes it.\nfunction seq1(synth) {\n  var started = false\n  document.documentElement.addEventListener('mousedown', () => {\n    if (started) return\n    started = true\n\n    const $inputs = document.querySelectorAll('input'),\n      chords = ['A0 C1 E1', 'F0 A0 C1', 'G0 B0 D1', 'D0 F0 A0', 'E0 G0 B0'].map(\n        formatChords\n      )\n    console.log(chords)\n    var chordIdx = 0,\n      step = 0\n\n    const synth = new Tone.Synth()\n    const gain = new Tone.Gain(0.7)\n    synth.oscillator.type = 'sine'\n    gain.toMaster()\n    synth.connect(gain)\n\n    Array.from($inputs).forEach($input => {\n      $input.addEventListener('change', () => {\n        if ($input.checked) handleChord($input.value)\n      })\n    })\n\n    function handleChord(valueString) {\n      chordIdx = parseInt(valueString) - 1\n    }\n\n    Tone.Transport.scheduleRepeat(onRepeat, '16n')\n    Tone.Transport.start()\n    Tone.Transport.bpm.value = 90\n\n    function onRepeat(time) {\n      let chord = chords[chordIdx],\n        note = chord[step % chord.length]\n      synth.triggerAttackRelease(note, '16n', time)\n      step++\n    }\n\n    // DOWN THE LINE THIS WILL MAKE THINGS EASIER\n    function formatChords(chordString) {\n      let chord = chordString.split(' ')\n      let arr = []\n      for (let i = 0; i < 2; i++) {\n        for (let j = 0; j < chord.length; j++) {\n          let noteOct = chord[j].split(''),\n            note = noteOct[0]\n          let oct = noteOct[1] === '0' ? i + 4 : i + 5\n          note += oct\n          arr.push(note)\n        }\n      }\n      return arr\n    }\n  })\n}\nexport { seq1 }\n"]},"metadata":{},"sourceType":"module"}