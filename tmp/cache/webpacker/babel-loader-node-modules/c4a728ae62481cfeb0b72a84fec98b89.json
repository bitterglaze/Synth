{"ast":null,"code":"var _jsxFileName = \"/Users/bitterglaze/Share/hseadc2017_THEREMINVOX/app/javascript/containers/Synth.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n// import _ from 'lodash'\n// import React from 'react'\n// import Tone from 'tone'\n//\n// export default class Synth extends React.Component {\n//   constructor(props) {\n//     super(props)\n//\n//     let distortion = new Tone.Distortion({\n//       distortion: 1,\n//       oversample: '4x'\n//     })\n//\n//     let tremolo = new Tone.Tremolo({\n//       frequency: 10,\n//       type: 'sine',\n//       depth: 100,\n//       spread: 180\n//     })\n//\n//     let feedbackDelay = new Tone.FeedbackDelay({\n//       delayTime: '8n',\n//       maxDelay: 10\n//     })\n//\n//     let autoFilter = new Tone.AutoFilter({\n//       frequency: 1,\n//       type: 'sine',\n//       depth: 1,\n//       baseFrequency: 20,\n//       octaves: 4.6,\n//       filter: {\n//         type: 'lowpass',\n//         rolloff: -12,\n//         Q: 1\n//       }\n//     })\n//\n//     let distortion100 = new Tone.Distortion({\n//       distortion: 100,\n//       oversample: '4x'\n//     })\n//\n//     let autoPanner = new Tone.AutoPanner({\n//       frequency: 1,\n//       type: 'sine',\n//       depth: 1\n//     })\n//\n//     let autoWah = new Tone.AutoWah({\n//       baseFrequency: 100,\n//       octaves: 6,\n//       sensitivity: 0,\n//       Q: 2,\n//       gain: 2,\n//       follower: {\n//         attack: 0.3,\n//         release: 0.5\n//       }\n//     })\n//\n//     let bitCrusher = new Tone.BitCrusher({\n//       bits: 4\n//     })\n//\n//     let chebyshev = new Tone.Chebyshev({\n//       order: 50,\n//       oversample: 'none'\n//     })\n//\n//     let chorus = new Tone.Chorus({\n//       frequency: 1.5,\n//       delayTime: 3.5,\n//       depth: 0.7,\n//       type: 'sine',\n//       spread: 180\n//     })\n//\n//     let convolver = new Tone.Convolver({\n//       onload: Tone.noOp,\n//       normalize: true\n//     })\n//\n//     let effect = new Tone.Effect({\n//       wet: 1\n//     })\n//\n//     var feedbackEffect = new Tone.FeedbackEffect({\n//       feedback: 0.125\n//     })\n//\n//     var freeverb = new Tone.Freeverb({\n//       roomSize: 0.7,\n//       dampening: 3000\n//     })\n//\n//     var jcReverb = new Tone.JCReverb({\n//       roomSize: 0.5\n//     })\n//\n//     let phaser = new Tone.Phaser({\n//       frequency: 0.5,\n//       octaves: 3,\n//       stages: 10,\n//       Q: 10,\n//       baseFrequency: 350\n//     })\n//\n//     let pingPongDelay = new Tone.PingPongDelay({\n//       delayTime: 0.25,\n//       maxDelayTime: 1\n//     })\n//\n//     let pitchShift = new Tone.PitchShift({\n//       pitch: 0,\n//       windowSize: 0.1,\n//       delayTime: 0,\n//       feedback: 0\n//     })\n//\n//     let reverb = new Tone.Reverb({\n//       decay: 1.5,\n//       preDelay: 0.01\n//     })\n//\n//     let stereoWidener = new Tone.StereoWidener({\n//       width: 0.5\n//     })\n//\n//     let vibrato = new Tone.Vibrato({\n//       maxDelay: 0.005,\n//       frequency: 5,\n//       depth: 0.1,\n//       type: 'sine'\n//     })\n//\n//     this.state = {\n//       distortion: distortion,\n//       distortionIsOn: false,\n//       tremolo: tremolo,\n//       tremoloIsOn: false,\n//       feedbackDelay: feedbackDelay,\n//       feedbackDelayIsOn: false,\n//       autoFilter: autoFilter,\n//       autoFilterIsOn: false,\n//       distortion100: distortion100,\n//       distortion100IsOn: false,\n//       autoPanner: autoPanner,\n//       autoPannerIsOn: false,\n//\n//       autoWah: autoWah,\n//       autoWahIsOn: false,\n//       bitCrusher: bitCrusher,\n//       bitCrusherIsOn: false,\n//       chebyshev: chebyshev,\n//       chebyshevIsOn: false,\n//       chorus: chorus,\n//       chorusIsOn: false,\n//       convolver: convolver,\n//       convolverIsOn: false,\n//       effect: effect,\n//       effectIsOn: false,\n//       feedbackEffect: feedbackEffect,\n//       feedbackEffectIsOn: false,\n//       freeverb: freeverb,\n//       freeverbIsOn: false,\n//       jcReverb: jcReverb,\n//       jcReverbIsOn: false,\n//       phaser: phaser,\n//       phaserIsOn: false,\n//       pingPongDelay: pingPongDelay,\n//       pingPongDelayIsOn: false,\n//       pitchShift: pitchShift,\n//       pitchShiftIsOn: false,\n//       reverb: reverb,\n//       reverbIsOn: false,\n//       stereoWidener: stereoWidener,\n//       stereoWidenerIsOn: false,\n//       vibrato: vibrato,\n//       vibratoIsOn: false\n//     }\n//\n//     this.startSynth = this.startSynth.bind(this)\n//     this.toggleFilter = this.toggleFilter.bind(this)\n//     this.toggleFeedbackDelay = this.toggleFeedbackDelay.bind(this)\n//     this.toggleTremolo = this.toggleTremolo.bind(this)\n//     this.toggleDistortion = this.toggleDistortion.bind(this)\n//     this.toggleDistortion100 = this.toggleDistortion100.bind(this)\n//     this.toggleAutoPanner = this.toggleAutoPanner.bind(this)\n//     this.toggleAutoWah = this.toggleAutoWah.bind(this)\n//\n//     this.toggleAutoWah = this.toggleAutoWah.bind(this)\n//     this.toggleBitCrusher = this.toggleBitCrusher.bind(this)\n//     this.toggleChebyshev = this.toggleChebyshev.bind(this)\n//     this.toggleChorus = this.toggleChorus.bind(this)\n//     this.toggleConvolver = this.toggleConvolver.bind(this)\n//     this.toggleEffect = this.toggleEffect.bind(this)\n//     this.toggleFeedbackEffect = this.toggleFeedbackEffect.bind(this)\n//     this.toggleFreeverb = this.toggleFreeverb.bind(this)\n//     this.toggleBitCrusher = this.toggleBitCrusher.bind(this)\n//     this.toggleJCReverb = this.toggleJCReverb.bind(this)\n//     this.togglePhaser = this.togglePhaser.bind(this)\n//     this.togglePingPongDelay = this.togglePingPongDelay.bind(this)\n//     this.togglePitchShift = this.togglePitchShift.bind(this)\n//     this.toggleReverb = this.toggleReverb.bind(this)\n//     this.toggleStereoWidener = this.toggleStereoWidener.bind(this)\n//     this.toggleVibrato = this.toggleVibrato.bind(this)\n//\n//     _.bindAll(this, 'startSynth', 'toggleDistortion100')\n//     //перебиндить все таким образом\n//   }\n//\n//   startSynth() {\n//     let synth = new Tone.Synth()\n//     synth.chain(\n//       this.state.autoFilter,\n//       this.state.feedbackDelay,\n//       this.state.tremolo,\n//       this.state.distortion,\n//       this.state.distortion100,\n//       this.state.autoPanner,\n//       this.state.autoWah,\n//       this.state.bitCrusher,\n//       this.state.chebyshev,\n//       this.state.chorus,\n//       this.state.convolver,\n//       this.state.effect,\n//       this.state.feedbackEffect,\n//       this.state.freeverb,\n//       this.state.jcReverb,\n//       this.state.phaser,\n//       this.state.pingPongDelay,\n//       this.state.pitchShift,\n//       this.state.reverb,\n//       this.state.stereoWidener,\n//       this.state.vibrato,\n//\n//       Tone.Master\n//     )\n//\n//     this.setState({\n//       synth: synth\n//     })\n//\n//     let loop = new Tone.Loop(function(time) {\n//       synth.triggerAttackRelease('C2', '8n', time)\n//     }, '4n')\n//\n//     loop.start('0m').stop('16m')\n//\n//     Tone.Transport.bpm.value = 115\n//     Tone.Transport.start()\n//   }\n//\n//   toggleFilter() {\n//     if (this.state.autoFilterIsOn == true) {\n//       this.state.autoFilter.wet.value = 0\n//\n//       this.setState({\n//         autoFilterIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.autoFilter, Tone.Master)\n//       this.state.autoFilter.wet.value = 1\n//\n//       this.setState({\n//         autoFilterIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleFeedbackDelay() {\n//     // let feedbackDelay1 = new Tone.FeedbackDelay({\n//     //   delayTime: '32n',\n//     //   maxDelay: 10\n//     // })\n//     //\n//     // let feedbackDelay2 = new Tone.FeedbackDelay({\n//     //   delayTime: '8n',\n//     //   maxDelay: 10\n//     // })\n//     //\n//     // this.state.synth.connect(feedbackDelay1)\n//     // this.state.synth.connect(feedbackDelay2)\n//     if (this.state.feedbackDelayIsOn == true) {\n//       this.state.feedbackDelay.wet.value = 0\n//\n//       this.setState({\n//         feedbackDelayIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.feedbackDelay, Tone.Master)\n//       this.state.feedbackDelay.wet.value = 1\n//\n//       this.setState({\n//         feedbackDelayIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleTremolo() {\n//     if (this.state.tremoloIsOn == true) {\n//       this.state.tremolo.wet.value = 0\n//\n//       this.setState({\n//         tremoloIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.tremolo, Tone.Master)\n//       this.state.tremolo.wet.value = 1\n//\n//       this.setState({\n//         tremoloIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleDistortion() {\n//     if (this.state.distortionIsOn == true) {\n//       // this.state.synth.disconnect()\n//       // this.state.synth.chain(Tone.Master) строчка ниже заменяет\n//\n//       this.state.distortion.wet.value = 0\n//\n//       this.setState({\n//         distortionIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.distortion, Tone.Master)\n//       this.state.distortion.wet.value = 1\n//\n//       this.setState({\n//         distortionIsOn: true\n//       })\n//     }\n//     //this.state.synth.connect(distortion)\n//   }\n//\n//   toggleDistortion100() {\n//     // let { distortion } = this.state\n//     // distortion.distortion = 100\n//     //\n//     // this.setState({\n//     //   distortion: distortion\n//     // })\n//     if (this.state.distortion100IsOn == true) {\n//       this.state.distortion100.wet.value = 0\n//\n//       this.setState({\n//         distortion100IsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.distortion100, Tone.Master)\n//       this.state.distortion100.wet.value = 1\n//\n//       this.setState({\n//         distortion100IsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleAutoPanner() {\n//     if (this.state.autoPannerIsOn == true) {\n//       this.state.autoPanner.wet.value = 0\n//\n//       this.setState({\n//         autoPannerIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.autoPanner, Tone.Master)\n//       this.state.autoPanner.wet.value = 1\n//\n//       this.setState({\n//         autoPannerIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleAutoWah() {\n//     if (this.state.autoWahIsOn == true) {\n//       this.state.autoWah.wet.value = 0\n//\n//       this.setState({\n//         autoWahIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.autoWah, Tone.Master)\n//       this.state.autoWah.wet.value = 1\n//\n//       this.setState({\n//         autoWahIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleBitCrusher() {\n//     if (this.state.bitCrusherIsOn == true) {\n//       this.state.bitCrusher.wet.value = 0\n//\n//       this.setState({\n//         bitCrusherIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.bitCrusher, Tone.Master)\n//       this.state.bitCrusher.wet.value = 1\n//\n//       this.setState({\n//         bitCrusherIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleChebyshev() {\n//     if (this.state.chebyshevIsOn == true) {\n//       this.state.chebyshev.wet.value = 0\n//\n//       this.setState({\n//         chebyshevIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.chebyshev, Tone.Master)\n//       this.state.chebyshev.wet.value = 1\n//\n//       this.setState({\n//         chebyshevIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleChorus() {\n//     if (this.state.chorusIsOn == true) {\n//       this.state.chorus.wet.value = 0\n//\n//       this.setState({\n//         chorusIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.chorus, Tone.Master)\n//       this.state.chorus.wet.value = 1\n//\n//       this.setState({\n//         chorusIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleConvolver() {\n//     if (this.state.convolverIsOn == true) {\n//       this.state.convolver.wet.value = 0\n//\n//       this.setState({\n//         convolverIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.convolver, Tone.Master)\n//       this.state.convolver.wet.value = 1\n//\n//       this.setState({\n//         convolverIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleEffect() {\n//     if (this.state.effectIsOn == true) {\n//       this.state.effect.wet.value = 0\n//\n//       this.setState({\n//         effectIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.effect, Tone.Master)\n//       this.state.effect.wet.value = 1\n//\n//       this.setState({\n//         effectIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleFeedbackEffect() {\n//     if (this.state.feedbackEffectIsOn == true) {\n//       this.state.feedbackEffect.wet.value = 0\n//\n//       this.setState({\n//         feedbackEffectIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.feedbackEffect, Tone.Master)\n//       this.state.feedbackEffect.wet.value = 1\n//\n//       this.setState({\n//         feedbackEffectIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleFreeverb() {\n//     if (this.state.freeverbIsOn == true) {\n//       this.state.freeverb.wet.value = 0\n//\n//       this.setState({\n//         freeverbIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.freeverb, Tone.Master)\n//       this.state.freeverb.wet.value = 1\n//\n//       this.setState({\n//         freeverbIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleJCReverb() {\n//     if (this.state.jcReverbIsOn == true) {\n//       this.state.jcReverb.wet.value = 0\n//\n//       this.setState({\n//         jcReverbIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.jcReverb, Tone.Master)\n//       this.state.jcReverb.wet.value = 1\n//\n//       this.setState({\n//         jcReverbIsOn: true\n//       })\n//     }\n//   }\n//\n//   togglePhaser() {\n//     if (this.state.phaserIsOn == true) {\n//       this.state.phaser.wet.value = 0\n//\n//       this.setState({\n//         phaserIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.phaser, Tone.Master)\n//       this.state.phaser.wet.value = 1\n//\n//       this.setState({\n//         phaserIsOn: true\n//       })\n//     }\n//   }\n//\n//   togglePingPongDelay() {\n//     if (this.state.pingPongDelayIsOn == true) {\n//       this.state.pingPongDelay.wet.value = 0\n//\n//       this.setState({\n//         pingPongDelayIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.pingPongDelay, Tone.Master)\n//       this.state.pingPongDelay.wet.value = 1\n//\n//       this.setState({\n//         pingPongDelayIsOn: true\n//       })\n//     }\n//   }\n//\n//   togglePitchShift() {\n//     if (this.state.pitchShiftIsOn == true) {\n//       this.state.pitchShift.wet.value = 0\n//\n//       this.setState({\n//         pitchShiftIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.pitchShift, Tone.Master)\n//       this.state.pitchShift.wet.value = 1\n//\n//       this.setState({\n//         pitchShiftIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleReverb() {\n//     if (this.state.reverbIsOn == true) {\n//       this.state.reverb.wet.value = 0\n//\n//       this.setState({\n//         reverbIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.reverb, Tone.Master)\n//       this.state.reverb.wet.value = 1\n//\n//       this.setState({\n//         reverbIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleStereoWidener() {\n//     if (this.state.stereoWidenerIsOn == true) {\n//       this.state.stereoWidener.wet.value = 0\n//\n//       this.setState({\n//         stereoWidenerIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.stereoWidener, Tone.Master)\n//       this.state.stereoWidener.wet.value = 1\n//\n//       this.setState({\n//         stereoWidenerIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleVibrato() {\n//     if (this.state.vibratoIsOn == true) {\n//       this.state.vibrato.wet.value = 0\n//\n//       this.setState({\n//         vibratoIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.vibrato, Tone.Master)\n//       this.state.vibrato.wet.value = 1\n//\n//       this.setState({\n//         vibratoIsOn: true\n//       })\n//     }\n//   }\n//\n//   render() {\n//     return (\n//       <div>\n//         <div onClick={this.startSynth}>Start</div>\n//         <div onClick={this.toggleFilter}>\n//           toggle Filter {this.state.autoFilterIsOn}\n//         </div>\n//         <div onClick={this.toggleFeedbackDelay}>\n//           toggle FeedbackDelay {this.state.feedbackDelayIsOn}\n//         </div>\n//         <div onClick={this.toggleTremolo}>\n//           toggle Tremolo {this.state.tremoloIsOn}\n//         </div>\n//         <div onClick={this.toggleDistortion}>\n//           toggle Distortion {this.state.distortionIsOn}\n//         </div>\n//         <div onClick={this.toggleDistortion100}>\n//           toggle Distortion100 {this.state.distortion100IsOn}\n//         </div>\n//         <div onClick={this.toggleAutoPanner}>\n//           toggle AutoPanner {this.state.autoPannerIsOn}\n//         </div>\n//\n//         <div onClick={this.toggleAutoWah}>\n//           toggle AutoWah {this.state.autoWahIsOn}\n//         </div>\n//         <div onClick={this.toggleBitCrusher}>\n//           toggle BitCrusher {this.state.bitCrusherIsOn}\n//         </div>\n//         <div onClick={this.toggleChebyshev}>\n//           toggle Chebyshev {this.state.chebyshevIsOn}\n//         </div>\n//         <div onClick={this.toggleChorus}>\n//           toggle Chorus {this.state.chorusIsOn}\n//         </div>\n//         <div onClick={this.toggleConvolver}>\n//           toggle Convolver {this.state.convolverIsOn}\n//         </div>\n//         <div onClick={this.toggleEffect}>\n//           toggle Effect {this.state.effectIsOn}\n//         </div>\n//         <div onClick={this.toggleFeedbackEffect}>\n//           toggle FeedbackEffect {this.state.feedbackEffectIsOn}\n//         </div>\n//         <div onClick={this.toggleFreeverb}>\n//           toggle Freeverb {this.state.freeverbIsOn}\n//         </div>\n//         <div onClick={this.toggleJCReverb}>\n//           toggle JCReverb {this.state.jcReverbIsOn}\n//         </div>\n//         <div onClick={this.togglePhaser}>\n//           toggle Phaser {this.state.phaserIsOn}\n//         </div>\n//         <div onClick={this.togglePingPongDelay}>\n//           toggle PingPongDelay {this.state.pingPongDelayIsOn}\n//         </div>\n//         <div onClick={this.togglePitchShift}>\n//           toggle PitchShift {this.state.pitchShiftIsOn}\n//         </div>\n//         <div onClick={this.toggleReverb}>\n//           toggle Reverb {this.state.reverbIsOn}\n//         </div>\n//         <div onClick={this.toggleStereoWidener}>\n//           toggle StereoWidener {this.state.stereoWidenerIsOn}\n//         </div>\n//         <div onClick={this.toggleVibrato}>\n//           toggle Vibrato {this.state.vibratoIsOn}\n//         </div>\n//       </div>\n//     )\n//   }\n// }\n////список все эффектов\nimport _ from 'lodash';\nimport React from 'react';\nimport Tone from 'tone';\n\nvar Synth =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Synth, _React$Component);\n\n  function Synth(props) {\n    var _this;\n\n    _classCallCheck(this, Synth);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Synth).call(this, props));\n    var distortion = new Tone.Distortion({\n      distortion: 100,\n      oversample: '4x'\n    });\n    var tremolo = new Tone.Tremolo({\n      frequency: 10,\n      type: 'sine',\n      depth: 100,\n      spread: 180\n    });\n    var feedbackDelay = new Tone.FeedbackDelay({\n      delayTime: '8n',\n      maxDelay: 10\n    });\n    var autoFilter = new Tone.AutoFilter({\n      frequency: 1,\n      type: 'sine',\n      depth: 1,\n      baseFrequency: 20,\n      octaves: 4.6,\n      filter: {\n        type: 'lowpass',\n        rolloff: -12,\n        Q: 1\n      }\n    });\n    var distortion100 = new Tone.Distortion({\n      distortion: 100,\n      oversample: '4x'\n    });\n    var autoPanner = new Tone.AutoPanner({\n      frequency: 1,\n      type: 'sine',\n      depth: 1\n    });\n    var autoWah = new Tone.AutoWah({\n      baseFrequency: 100,\n      octaves: 6,\n      sensitivity: 0,\n      Q: 2,\n      gain: 2,\n      follower: {\n        attack: 0.3,\n        release: 0.5\n      }\n    });\n    var bitCrusher = new Tone.BitCrusher({\n      bits: 4\n    });\n    var chebyshev = new Tone.Chebyshev({\n      order: 50,\n      oversample: 'none'\n    });\n    var chorus = new Tone.Chorus({\n      frequency: 1.5,\n      delayTime: 3.5,\n      depth: 0.7,\n      type: 'sine',\n      spread: 180\n    });\n    var convolver = new Tone.Convolver({\n      onload: Tone.noOp,\n      normalize: true\n    }); // let effect = new Tone.Effect({\n    //   wet: 1\n    // })\n\n    var feedbackEffect = new Tone.FeedbackEffect({\n      feedback: 0.125\n    });\n    var freeverb = new Tone.Freeverb({\n      roomSize: 0.7,\n      dampening: 3000\n    });\n    var jcReverb = new Tone.JCReverb({\n      roomSize: 0.5\n    });\n    var phaser = new Tone.Phaser({\n      frequency: 0.5,\n      octaves: 3,\n      stages: 10,\n      Q: 10,\n      baseFrequency: 350\n    });\n    var pingPongDelay = new Tone.PingPongDelay({\n      delayTime: 0.25,\n      maxDelayTime: 1\n    });\n    var pitchShift = new Tone.PitchShift({\n      pitch: 0,\n      windowSize: 0.1,\n      delayTime: 0,\n      feedback: 0\n    });\n    var reverb = new Tone.Reverb({\n      decay: 1.5,\n      preDelay: 0.01\n    });\n    var stereoWidener = new Tone.StereoWidener({\n      width: 0.5\n    });\n    var vibrato = new Tone.Vibrato({\n      maxDelay: 0.005,\n      frequency: 5,\n      depth: 0.1,\n      type: 'sine'\n    });\n    autoFilter.wet.value = 0;\n    autoPanner.wet.value = 0;\n    autoWah.wet.value = 0;\n    bitCrusher.wet.value = 0;\n    chebyshev.wet.value = 0;\n    chorus.wet.value = 0;\n    convolver.wet.value = 0;\n    distortion.wet.value = 0;\n    feedbackDelay.wet.value = 0;\n    feedbackEffect.wet.value = 0;\n    freeverb.wet.value = 0;\n    jcReverb.wet.value = 0;\n    phaser.wet.value = 0;\n    pingPongDelay.wet.value = 0;\n    pitchShift.wet.value = 0;\n    reverb.wet.value = 0;\n    stereoWidener.wet.value = 0;\n    tremolo.wet.value = 0;\n    vibrato.wet.value = 0; // SYNTH\n\n    var synth = new Tone.Synth();\n    synth.chain(autoFilter, autoPanner, autoWah, bitCrusher, chebyshev, chorus, convolver, distortion, feedbackDelay, feedbackEffect, freeverb, jcReverb, phaser, pingPongDelay, pitchShift, reverb, stereoWidener, tremolo, vibrato, Tone.Master);\n    _this.state = {\n      autoFilter: {\n        effect: autoFilter,\n        wet: 0,\n        on: false\n      },\n      autoPanner: {\n        effect: autoPanner,\n        wet: 0,\n        on: false\n      },\n      autoWah: {\n        effect: autoWah,\n        wet: 0,\n        on: false\n      },\n      bitCrusher: {\n        effect: bitCrusher,\n        wet: 0,\n        on: false\n      },\n      chebyshev: {\n        effect: chebyshev,\n        wet: 0,\n        on: false\n      },\n      chorus: {\n        effect: chorus,\n        wet: 0,\n        on: false\n      },\n      convolver: {\n        effect: convolver,\n        wet: 0,\n        on: false\n      },\n      distortion: {\n        effect: distortion,\n        wet: 0,\n        on: false\n      },\n      feedbackDelay: {\n        effect: feedbackDelay,\n        wet: 0,\n        on: false\n      },\n      feedbackEffect: {\n        effect: feedbackEffect,\n        wet: 0,\n        on: false\n      },\n      freeverb: {\n        effect: freeverb,\n        wet: 0,\n        on: false\n      },\n      jcReverb: {\n        effect: jcReverb,\n        wet: 0,\n        on: false\n      },\n      phaser: {\n        effect: phaser,\n        wet: 0,\n        on: false\n      },\n      pingPongDelay: {\n        effect: pingPongDelay,\n        wet: 0,\n        on: false\n      },\n      pitchShift: {\n        effect: pitchShift,\n        wet: 0,\n        on: false\n      },\n      reverb: {\n        effect: reverb,\n        wet: 0,\n        on: false\n      },\n      stereoWidener: {\n        effect: stereoWidener,\n        wet: 0,\n        on: false\n      },\n      tremolo: {\n        effect: tremolo,\n        wet: 0,\n        on: false\n      },\n      vibrato: {\n        effect: vibrato,\n        wet: 0,\n        on: false\n      },\n      synth: synth\n    };\n    _this.startSynth = _this.startSynth.bind(_assertThisInitialized(_this));\n    _this.toggleDistortion = _this.toggleDistortion.bind(_assertThisInitialized(_this));\n\n    _.bindAll(_assertThisInitialized(_this), 'startSynth', 'toggleDistortion100', 'changeDistortionWetValue'); // перебиндить все таким образом\n\n\n    return _this;\n  }\n\n  _createClass(Synth, [{\n    key: \"startSynth\",\n    value: function startSynth() {\n      var synth = this.state.synth;\n      var loop = new Tone.Loop(function (time) {\n        synth.triggerAttackRelease('C2', '8n', time);\n      }, '4n');\n      loop.start('0m'); //.stop('16m')\n\n      Tone.Transport.bpm.value = 115;\n      Tone.Transport.start();\n    }\n  }, {\n    key: \"toggleDistortion\",\n    value: function toggleDistortion() {\n      var _this$state$distortio = this.state.distortion,\n          effect = _this$state$distortio.effect,\n          wet = _this$state$distortio.wet,\n          on = _this$state$distortio.on;\n      effect.wet.value = on == true ? 0 : wet;\n      on = !on;\n      this.setState({\n        distortion: {\n          effect: effect,\n          wet: wet,\n          on: on\n        }\n      });\n    }\n  }, {\n    key: \"changeDistortionWetValue\",\n    value: function changeDistortionWetValue(e) {\n      var _this$state$distortio2 = this.state.distortion,\n          effect = _this$state$distortio2.effect,\n          wet = _this$state$distortio2.wet,\n          on = _this$state$distortio2.on;\n      effect.wet.value = on == true ? e.target.value : 0;\n      wet = e.target.value;\n      this.setState({\n        distortion: {\n          effect: effect,\n          wet: wet,\n          on: on\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var distortion = this.state.distortion;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 973\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onClick: this.startSynth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 974\n        },\n        __self: this\n      }, \"Start\"), React.createElement(\"input\", {\n        onBlur: this.changeDistortionWetValue,\n        defaultValue: distortion.wet,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 976\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        onClick: this.toggleDistortion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 980\n        },\n        __self: this\n      }, \"toggle Distortion\"));\n    }\n  }]);\n\n  return Synth;\n}(React.Component);\n\nexport { Synth as default };","map":{"version":3,"sources":["/Users/bitterglaze/Share/hseadc2017_THEREMINVOX/app/javascript/containers/Synth.jsx"],"names":["_","React","Tone","Synth","props","distortion","Distortion","oversample","tremolo","Tremolo","frequency","type","depth","spread","feedbackDelay","FeedbackDelay","delayTime","maxDelay","autoFilter","AutoFilter","baseFrequency","octaves","filter","rolloff","Q","distortion100","autoPanner","AutoPanner","autoWah","AutoWah","sensitivity","gain","follower","attack","release","bitCrusher","BitCrusher","bits","chebyshev","Chebyshev","order","chorus","Chorus","convolver","Convolver","onload","noOp","normalize","feedbackEffect","FeedbackEffect","feedback","freeverb","Freeverb","roomSize","dampening","jcReverb","JCReverb","phaser","Phaser","stages","pingPongDelay","PingPongDelay","maxDelayTime","pitchShift","PitchShift","pitch","windowSize","reverb","Reverb","decay","preDelay","stereoWidener","StereoWidener","width","vibrato","Vibrato","wet","value","synth","chain","Master","state","effect","on","startSynth","bind","toggleDistortion","bindAll","loop","Loop","time","triggerAttackRelease","start","Transport","bpm","setState","e","target","changeDistortionWetValue","Component"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,KAAP,MAAkB,OAAl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","sourcesContent":["// import _ from 'lodash'\n// import React from 'react'\n// import Tone from 'tone'\n//\n// export default class Synth extends React.Component {\n//   constructor(props) {\n//     super(props)\n//\n//     let distortion = new Tone.Distortion({\n//       distortion: 1,\n//       oversample: '4x'\n//     })\n//\n//     let tremolo = new Tone.Tremolo({\n//       frequency: 10,\n//       type: 'sine',\n//       depth: 100,\n//       spread: 180\n//     })\n//\n//     let feedbackDelay = new Tone.FeedbackDelay({\n//       delayTime: '8n',\n//       maxDelay: 10\n//     })\n//\n//     let autoFilter = new Tone.AutoFilter({\n//       frequency: 1,\n//       type: 'sine',\n//       depth: 1,\n//       baseFrequency: 20,\n//       octaves: 4.6,\n//       filter: {\n//         type: 'lowpass',\n//         rolloff: -12,\n//         Q: 1\n//       }\n//     })\n//\n//     let distortion100 = new Tone.Distortion({\n//       distortion: 100,\n//       oversample: '4x'\n//     })\n//\n//     let autoPanner = new Tone.AutoPanner({\n//       frequency: 1,\n//       type: 'sine',\n//       depth: 1\n//     })\n//\n//     let autoWah = new Tone.AutoWah({\n//       baseFrequency: 100,\n//       octaves: 6,\n//       sensitivity: 0,\n//       Q: 2,\n//       gain: 2,\n//       follower: {\n//         attack: 0.3,\n//         release: 0.5\n//       }\n//     })\n//\n//     let bitCrusher = new Tone.BitCrusher({\n//       bits: 4\n//     })\n//\n//     let chebyshev = new Tone.Chebyshev({\n//       order: 50,\n//       oversample: 'none'\n//     })\n//\n//     let chorus = new Tone.Chorus({\n//       frequency: 1.5,\n//       delayTime: 3.5,\n//       depth: 0.7,\n//       type: 'sine',\n//       spread: 180\n//     })\n//\n//     let convolver = new Tone.Convolver({\n//       onload: Tone.noOp,\n//       normalize: true\n//     })\n//\n//     let effect = new Tone.Effect({\n//       wet: 1\n//     })\n//\n//     var feedbackEffect = new Tone.FeedbackEffect({\n//       feedback: 0.125\n//     })\n//\n//     var freeverb = new Tone.Freeverb({\n//       roomSize: 0.7,\n//       dampening: 3000\n//     })\n//\n//     var jcReverb = new Tone.JCReverb({\n//       roomSize: 0.5\n//     })\n//\n//     let phaser = new Tone.Phaser({\n//       frequency: 0.5,\n//       octaves: 3,\n//       stages: 10,\n//       Q: 10,\n//       baseFrequency: 350\n//     })\n//\n//     let pingPongDelay = new Tone.PingPongDelay({\n//       delayTime: 0.25,\n//       maxDelayTime: 1\n//     })\n//\n//     let pitchShift = new Tone.PitchShift({\n//       pitch: 0,\n//       windowSize: 0.1,\n//       delayTime: 0,\n//       feedback: 0\n//     })\n//\n//     let reverb = new Tone.Reverb({\n//       decay: 1.5,\n//       preDelay: 0.01\n//     })\n//\n//     let stereoWidener = new Tone.StereoWidener({\n//       width: 0.5\n//     })\n//\n//     let vibrato = new Tone.Vibrato({\n//       maxDelay: 0.005,\n//       frequency: 5,\n//       depth: 0.1,\n//       type: 'sine'\n//     })\n//\n//     this.state = {\n//       distortion: distortion,\n//       distortionIsOn: false,\n//       tremolo: tremolo,\n//       tremoloIsOn: false,\n//       feedbackDelay: feedbackDelay,\n//       feedbackDelayIsOn: false,\n//       autoFilter: autoFilter,\n//       autoFilterIsOn: false,\n//       distortion100: distortion100,\n//       distortion100IsOn: false,\n//       autoPanner: autoPanner,\n//       autoPannerIsOn: false,\n//\n//       autoWah: autoWah,\n//       autoWahIsOn: false,\n//       bitCrusher: bitCrusher,\n//       bitCrusherIsOn: false,\n//       chebyshev: chebyshev,\n//       chebyshevIsOn: false,\n//       chorus: chorus,\n//       chorusIsOn: false,\n//       convolver: convolver,\n//       convolverIsOn: false,\n//       effect: effect,\n//       effectIsOn: false,\n//       feedbackEffect: feedbackEffect,\n//       feedbackEffectIsOn: false,\n//       freeverb: freeverb,\n//       freeverbIsOn: false,\n//       jcReverb: jcReverb,\n//       jcReverbIsOn: false,\n//       phaser: phaser,\n//       phaserIsOn: false,\n//       pingPongDelay: pingPongDelay,\n//       pingPongDelayIsOn: false,\n//       pitchShift: pitchShift,\n//       pitchShiftIsOn: false,\n//       reverb: reverb,\n//       reverbIsOn: false,\n//       stereoWidener: stereoWidener,\n//       stereoWidenerIsOn: false,\n//       vibrato: vibrato,\n//       vibratoIsOn: false\n//     }\n//\n//     this.startSynth = this.startSynth.bind(this)\n//     this.toggleFilter = this.toggleFilter.bind(this)\n//     this.toggleFeedbackDelay = this.toggleFeedbackDelay.bind(this)\n//     this.toggleTremolo = this.toggleTremolo.bind(this)\n//     this.toggleDistortion = this.toggleDistortion.bind(this)\n//     this.toggleDistortion100 = this.toggleDistortion100.bind(this)\n//     this.toggleAutoPanner = this.toggleAutoPanner.bind(this)\n//     this.toggleAutoWah = this.toggleAutoWah.bind(this)\n//\n//     this.toggleAutoWah = this.toggleAutoWah.bind(this)\n//     this.toggleBitCrusher = this.toggleBitCrusher.bind(this)\n//     this.toggleChebyshev = this.toggleChebyshev.bind(this)\n//     this.toggleChorus = this.toggleChorus.bind(this)\n//     this.toggleConvolver = this.toggleConvolver.bind(this)\n//     this.toggleEffect = this.toggleEffect.bind(this)\n//     this.toggleFeedbackEffect = this.toggleFeedbackEffect.bind(this)\n//     this.toggleFreeverb = this.toggleFreeverb.bind(this)\n//     this.toggleBitCrusher = this.toggleBitCrusher.bind(this)\n//     this.toggleJCReverb = this.toggleJCReverb.bind(this)\n//     this.togglePhaser = this.togglePhaser.bind(this)\n//     this.togglePingPongDelay = this.togglePingPongDelay.bind(this)\n//     this.togglePitchShift = this.togglePitchShift.bind(this)\n//     this.toggleReverb = this.toggleReverb.bind(this)\n//     this.toggleStereoWidener = this.toggleStereoWidener.bind(this)\n//     this.toggleVibrato = this.toggleVibrato.bind(this)\n//\n//     _.bindAll(this, 'startSynth', 'toggleDistortion100')\n//     //перебиндить все таким образом\n//   }\n//\n//   startSynth() {\n//     let synth = new Tone.Synth()\n//     synth.chain(\n//       this.state.autoFilter,\n//       this.state.feedbackDelay,\n//       this.state.tremolo,\n//       this.state.distortion,\n//       this.state.distortion100,\n//       this.state.autoPanner,\n//       this.state.autoWah,\n//       this.state.bitCrusher,\n//       this.state.chebyshev,\n//       this.state.chorus,\n//       this.state.convolver,\n//       this.state.effect,\n//       this.state.feedbackEffect,\n//       this.state.freeverb,\n//       this.state.jcReverb,\n//       this.state.phaser,\n//       this.state.pingPongDelay,\n//       this.state.pitchShift,\n//       this.state.reverb,\n//       this.state.stereoWidener,\n//       this.state.vibrato,\n//\n//       Tone.Master\n//     )\n//\n//     this.setState({\n//       synth: synth\n//     })\n//\n//     let loop = new Tone.Loop(function(time) {\n//       synth.triggerAttackRelease('C2', '8n', time)\n//     }, '4n')\n//\n//     loop.start('0m').stop('16m')\n//\n//     Tone.Transport.bpm.value = 115\n//     Tone.Transport.start()\n//   }\n//\n//   toggleFilter() {\n//     if (this.state.autoFilterIsOn == true) {\n//       this.state.autoFilter.wet.value = 0\n//\n//       this.setState({\n//         autoFilterIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.autoFilter, Tone.Master)\n//       this.state.autoFilter.wet.value = 1\n//\n//       this.setState({\n//         autoFilterIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleFeedbackDelay() {\n//     // let feedbackDelay1 = new Tone.FeedbackDelay({\n//     //   delayTime: '32n',\n//     //   maxDelay: 10\n//     // })\n//     //\n//     // let feedbackDelay2 = new Tone.FeedbackDelay({\n//     //   delayTime: '8n',\n//     //   maxDelay: 10\n//     // })\n//     //\n//     // this.state.synth.connect(feedbackDelay1)\n//     // this.state.synth.connect(feedbackDelay2)\n//     if (this.state.feedbackDelayIsOn == true) {\n//       this.state.feedbackDelay.wet.value = 0\n//\n//       this.setState({\n//         feedbackDelayIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.feedbackDelay, Tone.Master)\n//       this.state.feedbackDelay.wet.value = 1\n//\n//       this.setState({\n//         feedbackDelayIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleTremolo() {\n//     if (this.state.tremoloIsOn == true) {\n//       this.state.tremolo.wet.value = 0\n//\n//       this.setState({\n//         tremoloIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.tremolo, Tone.Master)\n//       this.state.tremolo.wet.value = 1\n//\n//       this.setState({\n//         tremoloIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleDistortion() {\n//     if (this.state.distortionIsOn == true) {\n//       // this.state.synth.disconnect()\n//       // this.state.synth.chain(Tone.Master) строчка ниже заменяет\n//\n//       this.state.distortion.wet.value = 0\n//\n//       this.setState({\n//         distortionIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.distortion, Tone.Master)\n//       this.state.distortion.wet.value = 1\n//\n//       this.setState({\n//         distortionIsOn: true\n//       })\n//     }\n//     //this.state.synth.connect(distortion)\n//   }\n//\n//   toggleDistortion100() {\n//     // let { distortion } = this.state\n//     // distortion.distortion = 100\n//     //\n//     // this.setState({\n//     //   distortion: distortion\n//     // })\n//     if (this.state.distortion100IsOn == true) {\n//       this.state.distortion100.wet.value = 0\n//\n//       this.setState({\n//         distortion100IsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.distortion100, Tone.Master)\n//       this.state.distortion100.wet.value = 1\n//\n//       this.setState({\n//         distortion100IsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleAutoPanner() {\n//     if (this.state.autoPannerIsOn == true) {\n//       this.state.autoPanner.wet.value = 0\n//\n//       this.setState({\n//         autoPannerIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.autoPanner, Tone.Master)\n//       this.state.autoPanner.wet.value = 1\n//\n//       this.setState({\n//         autoPannerIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleAutoWah() {\n//     if (this.state.autoWahIsOn == true) {\n//       this.state.autoWah.wet.value = 0\n//\n//       this.setState({\n//         autoWahIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.autoWah, Tone.Master)\n//       this.state.autoWah.wet.value = 1\n//\n//       this.setState({\n//         autoWahIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleBitCrusher() {\n//     if (this.state.bitCrusherIsOn == true) {\n//       this.state.bitCrusher.wet.value = 0\n//\n//       this.setState({\n//         bitCrusherIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.bitCrusher, Tone.Master)\n//       this.state.bitCrusher.wet.value = 1\n//\n//       this.setState({\n//         bitCrusherIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleChebyshev() {\n//     if (this.state.chebyshevIsOn == true) {\n//       this.state.chebyshev.wet.value = 0\n//\n//       this.setState({\n//         chebyshevIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.chebyshev, Tone.Master)\n//       this.state.chebyshev.wet.value = 1\n//\n//       this.setState({\n//         chebyshevIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleChorus() {\n//     if (this.state.chorusIsOn == true) {\n//       this.state.chorus.wet.value = 0\n//\n//       this.setState({\n//         chorusIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.chorus, Tone.Master)\n//       this.state.chorus.wet.value = 1\n//\n//       this.setState({\n//         chorusIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleConvolver() {\n//     if (this.state.convolverIsOn == true) {\n//       this.state.convolver.wet.value = 0\n//\n//       this.setState({\n//         convolverIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.convolver, Tone.Master)\n//       this.state.convolver.wet.value = 1\n//\n//       this.setState({\n//         convolverIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleEffect() {\n//     if (this.state.effectIsOn == true) {\n//       this.state.effect.wet.value = 0\n//\n//       this.setState({\n//         effectIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.effect, Tone.Master)\n//       this.state.effect.wet.value = 1\n//\n//       this.setState({\n//         effectIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleFeedbackEffect() {\n//     if (this.state.feedbackEffectIsOn == true) {\n//       this.state.feedbackEffect.wet.value = 0\n//\n//       this.setState({\n//         feedbackEffectIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.feedbackEffect, Tone.Master)\n//       this.state.feedbackEffect.wet.value = 1\n//\n//       this.setState({\n//         feedbackEffectIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleFreeverb() {\n//     if (this.state.freeverbIsOn == true) {\n//       this.state.freeverb.wet.value = 0\n//\n//       this.setState({\n//         freeverbIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.freeverb, Tone.Master)\n//       this.state.freeverb.wet.value = 1\n//\n//       this.setState({\n//         freeverbIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleJCReverb() {\n//     if (this.state.jcReverbIsOn == true) {\n//       this.state.jcReverb.wet.value = 0\n//\n//       this.setState({\n//         jcReverbIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.jcReverb, Tone.Master)\n//       this.state.jcReverb.wet.value = 1\n//\n//       this.setState({\n//         jcReverbIsOn: true\n//       })\n//     }\n//   }\n//\n//   togglePhaser() {\n//     if (this.state.phaserIsOn == true) {\n//       this.state.phaser.wet.value = 0\n//\n//       this.setState({\n//         phaserIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.phaser, Tone.Master)\n//       this.state.phaser.wet.value = 1\n//\n//       this.setState({\n//         phaserIsOn: true\n//       })\n//     }\n//   }\n//\n//   togglePingPongDelay() {\n//     if (this.state.pingPongDelayIsOn == true) {\n//       this.state.pingPongDelay.wet.value = 0\n//\n//       this.setState({\n//         pingPongDelayIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.pingPongDelay, Tone.Master)\n//       this.state.pingPongDelay.wet.value = 1\n//\n//       this.setState({\n//         pingPongDelayIsOn: true\n//       })\n//     }\n//   }\n//\n//   togglePitchShift() {\n//     if (this.state.pitchShiftIsOn == true) {\n//       this.state.pitchShift.wet.value = 0\n//\n//       this.setState({\n//         pitchShiftIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.pitchShift, Tone.Master)\n//       this.state.pitchShift.wet.value = 1\n//\n//       this.setState({\n//         pitchShiftIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleReverb() {\n//     if (this.state.reverbIsOn == true) {\n//       this.state.reverb.wet.value = 0\n//\n//       this.setState({\n//         reverbIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.reverb, Tone.Master)\n//       this.state.reverb.wet.value = 1\n//\n//       this.setState({\n//         reverbIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleStereoWidener() {\n//     if (this.state.stereoWidenerIsOn == true) {\n//       this.state.stereoWidener.wet.value = 0\n//\n//       this.setState({\n//         stereoWidenerIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.stereoWidener, Tone.Master)\n//       this.state.stereoWidener.wet.value = 1\n//\n//       this.setState({\n//         stereoWidenerIsOn: true\n//       })\n//     }\n//   }\n//\n//   toggleVibrato() {\n//     if (this.state.vibratoIsOn == true) {\n//       this.state.vibrato.wet.value = 0\n//\n//       this.setState({\n//         vibratoIsOn: false\n//       })\n//     } else {\n//       this.state.synth.chain(this.state.vibrato, Tone.Master)\n//       this.state.vibrato.wet.value = 1\n//\n//       this.setState({\n//         vibratoIsOn: true\n//       })\n//     }\n//   }\n//\n//   render() {\n//     return (\n//       <div>\n//         <div onClick={this.startSynth}>Start</div>\n//         <div onClick={this.toggleFilter}>\n//           toggle Filter {this.state.autoFilterIsOn}\n//         </div>\n//         <div onClick={this.toggleFeedbackDelay}>\n//           toggle FeedbackDelay {this.state.feedbackDelayIsOn}\n//         </div>\n//         <div onClick={this.toggleTremolo}>\n//           toggle Tremolo {this.state.tremoloIsOn}\n//         </div>\n//         <div onClick={this.toggleDistortion}>\n//           toggle Distortion {this.state.distortionIsOn}\n//         </div>\n//         <div onClick={this.toggleDistortion100}>\n//           toggle Distortion100 {this.state.distortion100IsOn}\n//         </div>\n//         <div onClick={this.toggleAutoPanner}>\n//           toggle AutoPanner {this.state.autoPannerIsOn}\n//         </div>\n//\n//         <div onClick={this.toggleAutoWah}>\n//           toggle AutoWah {this.state.autoWahIsOn}\n//         </div>\n//         <div onClick={this.toggleBitCrusher}>\n//           toggle BitCrusher {this.state.bitCrusherIsOn}\n//         </div>\n//         <div onClick={this.toggleChebyshev}>\n//           toggle Chebyshev {this.state.chebyshevIsOn}\n//         </div>\n//         <div onClick={this.toggleChorus}>\n//           toggle Chorus {this.state.chorusIsOn}\n//         </div>\n//         <div onClick={this.toggleConvolver}>\n//           toggle Convolver {this.state.convolverIsOn}\n//         </div>\n//         <div onClick={this.toggleEffect}>\n//           toggle Effect {this.state.effectIsOn}\n//         </div>\n//         <div onClick={this.toggleFeedbackEffect}>\n//           toggle FeedbackEffect {this.state.feedbackEffectIsOn}\n//         </div>\n//         <div onClick={this.toggleFreeverb}>\n//           toggle Freeverb {this.state.freeverbIsOn}\n//         </div>\n//         <div onClick={this.toggleJCReverb}>\n//           toggle JCReverb {this.state.jcReverbIsOn}\n//         </div>\n//         <div onClick={this.togglePhaser}>\n//           toggle Phaser {this.state.phaserIsOn}\n//         </div>\n//         <div onClick={this.togglePingPongDelay}>\n//           toggle PingPongDelay {this.state.pingPongDelayIsOn}\n//         </div>\n//         <div onClick={this.togglePitchShift}>\n//           toggle PitchShift {this.state.pitchShiftIsOn}\n//         </div>\n//         <div onClick={this.toggleReverb}>\n//           toggle Reverb {this.state.reverbIsOn}\n//         </div>\n//         <div onClick={this.toggleStereoWidener}>\n//           toggle StereoWidener {this.state.stereoWidenerIsOn}\n//         </div>\n//         <div onClick={this.toggleVibrato}>\n//           toggle Vibrato {this.state.vibratoIsOn}\n//         </div>\n//       </div>\n//     )\n//   }\n// }\n\n////список все эффектов\n\nimport _ from 'lodash'\nimport React from 'react'\nimport Tone from 'tone'\n\nexport default class Synth extends React.Component {\n  constructor(props) {\n    super(props)\n\n    let distortion = new Tone.Distortion({\n      distortion: 100,\n      oversample: '4x'\n    })\n\n    let tremolo = new Tone.Tremolo({\n      frequency: 10,\n      type: 'sine',\n      depth: 100,\n      spread: 180\n    })\n\n    let feedbackDelay = new Tone.FeedbackDelay({\n      delayTime: '8n',\n      maxDelay: 10\n    })\n\n    let autoFilter = new Tone.AutoFilter({\n      frequency: 1,\n      type: 'sine',\n      depth: 1,\n      baseFrequency: 20,\n      octaves: 4.6,\n      filter: {\n        type: 'lowpass',\n        rolloff: -12,\n        Q: 1\n      }\n    })\n\n    let distortion100 = new Tone.Distortion({\n      distortion: 100,\n      oversample: '4x'\n    })\n\n    let autoPanner = new Tone.AutoPanner({\n      frequency: 1,\n      type: 'sine',\n      depth: 1\n    })\n\n    let autoWah = new Tone.AutoWah({\n      baseFrequency: 100,\n      octaves: 6,\n      sensitivity: 0,\n      Q: 2,\n      gain: 2,\n      follower: {\n        attack: 0.3,\n        release: 0.5\n      }\n    })\n\n    let bitCrusher = new Tone.BitCrusher({\n      bits: 4\n    })\n\n    let chebyshev = new Tone.Chebyshev({\n      order: 50,\n      oversample: 'none'\n    })\n\n    let chorus = new Tone.Chorus({\n      frequency: 1.5,\n      delayTime: 3.5,\n      depth: 0.7,\n      type: 'sine',\n      spread: 180\n    })\n\n    let convolver = new Tone.Convolver({\n      onload: Tone.noOp,\n      normalize: true\n    })\n\n    // let effect = new Tone.Effect({\n    //   wet: 1\n    // })\n\n    var feedbackEffect = new Tone.FeedbackEffect({\n      feedback: 0.125\n    })\n\n    var freeverb = new Tone.Freeverb({\n      roomSize: 0.7,\n      dampening: 3000\n    })\n\n    var jcReverb = new Tone.JCReverb({\n      roomSize: 0.5\n    })\n\n    let phaser = new Tone.Phaser({\n      frequency: 0.5,\n      octaves: 3,\n      stages: 10,\n      Q: 10,\n      baseFrequency: 350\n    })\n\n    let pingPongDelay = new Tone.PingPongDelay({\n      delayTime: 0.25,\n      maxDelayTime: 1\n    })\n\n    let pitchShift = new Tone.PitchShift({\n      pitch: 0,\n      windowSize: 0.1,\n      delayTime: 0,\n      feedback: 0\n    })\n\n    let reverb = new Tone.Reverb({\n      decay: 1.5,\n      preDelay: 0.01\n    })\n\n    let stereoWidener = new Tone.StereoWidener({\n      width: 0.5\n    })\n\n    let vibrato = new Tone.Vibrato({\n      maxDelay: 0.005,\n      frequency: 5,\n      depth: 0.1,\n      type: 'sine'\n    })\n\n    autoFilter.wet.value = 0\n    autoPanner.wet.value = 0\n    autoWah.wet.value = 0\n    bitCrusher.wet.value = 0\n    chebyshev.wet.value = 0\n    chorus.wet.value = 0\n    convolver.wet.value = 0\n    distortion.wet.value = 0\n    feedbackDelay.wet.value = 0\n    feedbackEffect.wet.value = 0\n    freeverb.wet.value = 0\n    jcReverb.wet.value = 0\n    phaser.wet.value = 0\n    pingPongDelay.wet.value = 0\n    pitchShift.wet.value = 0\n    reverb.wet.value = 0\n    stereoWidener.wet.value = 0\n    tremolo.wet.value = 0\n    vibrato.wet.value = 0\n\n    // SYNTH\n    let synth = new Tone.Synth()\n\n    synth.chain(\n      autoFilter,\n      autoPanner,\n      autoWah,\n      bitCrusher,\n      chebyshev,\n      chorus,\n      convolver,\n      distortion,\n      feedbackDelay,\n      feedbackEffect,\n      freeverb,\n      jcReverb,\n      phaser,\n      pingPongDelay,\n      pitchShift,\n      reverb,\n      stereoWidener,\n      tremolo,\n      vibrato,\n      Tone.Master\n    )\n\n    this.state = {\n      autoFilter: { effect: autoFilter, wet: 0, on: false },\n      autoPanner: { effect: autoPanner, wet: 0, on: false },\n      autoWah: { effect: autoWah, wet: 0, on: false },\n      bitCrusher: { effect: bitCrusher, wet: 0, on: false },\n      chebyshev: { effect: chebyshev, wet: 0, on: false },\n      chorus: { effect: chorus, wet: 0, on: false },\n      convolver: { effect: convolver, wet: 0, on: false },\n      distortion: { effect: distortion, wet: 0, on: false },\n      feedbackDelay: { effect: feedbackDelay, wet: 0, on: false },\n      feedbackEffect: { effect: feedbackEffect, wet: 0, on: false },\n      freeverb: { effect: freeverb, wet: 0, on: false },\n      jcReverb: { effect: jcReverb, wet: 0, on: false },\n      phaser: { effect: phaser, wet: 0, on: false },\n      pingPongDelay: { effect: pingPongDelay, wet: 0, on: false },\n      pitchShift: { effect: pitchShift, wet: 0, on: false },\n      reverb: { effect: reverb, wet: 0, on: false },\n      stereoWidener: { effect: stereoWidener, wet: 0, on: false },\n      tremolo: { effect: tremolo, wet: 0, on: false },\n      vibrato: { effect: vibrato, wet: 0, on: false },\n      synth\n    }\n\n    this.startSynth = this.startSynth.bind(this)\n    this.toggleDistortion = this.toggleDistortion.bind(this)\n\n    _.bindAll(\n      this,\n      'startSynth',\n      'toggleDistortion100',\n      'changeDistortionWetValue'\n    )\n    // перебиндить все таким образом\n  }\n\n  startSynth() {\n    let { synth } = this.state\n\n    let loop = new Tone.Loop(function(time) {\n      synth.triggerAttackRelease('C2', '8n', time)\n    }, '4n')\n\n    loop.start('0m') //.stop('16m')\n\n    Tone.Transport.bpm.value = 115\n    Tone.Transport.start()\n  }\n\n  toggleDistortion() {\n    let { effect, wet, on } = this.state.distortion\n\n    effect.wet.value = on == true ? 0 : wet\n    on = !on\n\n    this.setState({\n      distortion: {\n        effect,\n        wet,\n        on\n      }\n    })\n  }\n\n  changeDistortionWetValue(e) {\n    let { effect, wet, on } = this.state.distortion\n\n    effect.wet.value = on == true ? e.target.value : 0\n    wet = e.target.value\n\n    this.setState({\n      distortion: {\n        effect,\n        wet,\n        on\n      }\n    })\n  }\n\n  render() {\n    let { distortion } = this.state\n\n    return (\n      <div>\n        <div onClick={this.startSynth}>Start</div>\n\n        <input\n          onBlur={this.changeDistortionWetValue}\n          defaultValue={distortion.wet}\n        />\n        <div onClick={this.toggleDistortion}>toggle Distortion</div>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}