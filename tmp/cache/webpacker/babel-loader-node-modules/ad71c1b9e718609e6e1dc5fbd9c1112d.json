{"ast":null,"code":"import Tone from 'tone'; // function seq1(synth) {\n//   let seq = new Tone.Sequence(\n//     function(time, note) {\n//       console.log(time, note)\n//       //straight quater notes\n//       synth.triggerAttackRelease(note, '10hz', time)\n//     },\n//     ['A0 C1 E0', 'F5 A5 C5', 'G5 B5 D5', 'D5 F5 A5', 'E5 G5 B5']\n//   )\n//   return seq\n// }\n\nconsole.clear();\n\nfunction seq1(synth) {\n  ///var started = false;\n  // document.documentElement.addEventListener('mousedown', () => {\n  //   if (started) return;\n  //   started = true;\n  var $inputs = document.querySelectorAll('input'),\n      chords = ['A0 C1 E1', 'F0 A0 C1', 'G0 B0 D1', 'D0 F0 A0', 'E0 G0 B0'].map(formatChords);\n  console.log(chords);\n  var chordIdx = 0,\n      step = 0;\n  Array.from($inputs).forEach(function ($input) {\n    $input.addEventListener('change', function () {\n      if ($input.checked) handleChord($input.value);\n    });\n  });\n\n  function handleChord(valueString) {\n    chordIdx = parseInt(valueString) - 1;\n  }\n\n  Tone.Transport.scheduleRepeat(onRepeat, '16n');\n\n  function onRepeat(time) {\n    var chord = chords[chordIdx],\n        note = chord[step % chord.length];\n    synth.triggerAttackRelease(note, '16n', time);\n    step++;\n  } //   // DOWN THE LINE THIS WILL MAKE THINGS EASIER\n  //   function formatChords(chordString) {\n  //     let chord = chordString.split(' ');\n  //     let arr = [];\n  //     for (let i = 0; i < 2; i++) {\n  //       for (let j = 0; j < chord.length; j++) {\n  //         let noteOct = chord[j].split(''),\n  //             note = noteOct[0];\n  //         let oct = (noteOct[1] === '0') ? i + 4 : i + 5;\n  //         note += oct;\n  //         arr.push(note);\n  //       }\n  //     }\n  //     return arr;\n  //   }\n  // });\n\n}\n\nexport { seq1 };","map":{"version":3,"sources":["/Users/bitterglaze/Share/hseadc2017_THEREMINVOX/app/javascript/components/tunes/sequences.js"],"names":["Tone","console","clear","seq1","synth","$inputs","document","querySelectorAll","chords","map","formatChords","log","chordIdx","step","Array","from","forEach","$input","addEventListener","checked","handleChord","value","valueString","parseInt","Transport","scheduleRepeat","onRepeat","time","chord","note","length","triggerAttackRelease"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,OAAO,CAACC,KAAR;;AACA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB;AACA;AACA;AACA;AAEA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAhB;AAAA,MACEC,MAAM,GAAG,CAAC,UAAD,EAAa,UAAb,EAAyB,UAAzB,EAAqC,UAArC,EAAiD,UAAjD,EAA6DC,GAA7D,CACPC,YADO,CADX;AAIAT,EAAAA,OAAO,CAACU,GAAR,CAAYH,MAAZ;AACA,MAAII,QAAQ,GAAG,CAAf;AAAA,MACEC,IAAI,GAAG,CADT;AAGAC,EAAAA,KAAK,CAACC,IAAN,CAAWV,OAAX,EAAoBW,OAApB,CAA4B,UAAAC,MAAM,EAAI;AACpCA,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,YAAM;AACtC,UAAID,MAAM,CAACE,OAAX,EAAoBC,WAAW,CAACH,MAAM,CAACI,KAAR,CAAX;AACrB,KAFD;AAGD,GAJD;;AAMA,WAASD,WAAT,CAAqBE,WAArB,EAAkC;AAChCV,IAAAA,QAAQ,GAAGW,QAAQ,CAACD,WAAD,CAAR,GAAwB,CAAnC;AACD;;AAEDtB,EAAAA,IAAI,CAACwB,SAAL,CAAeC,cAAf,CAA8BC,QAA9B,EAAwC,KAAxC;;AAEA,WAASA,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,QAAIC,KAAK,GAAGpB,MAAM,CAACI,QAAD,CAAlB;AAAA,QACEiB,IAAI,GAAGD,KAAK,CAACf,IAAI,GAAGe,KAAK,CAACE,MAAd,CADd;AAEA1B,IAAAA,KAAK,CAAC2B,oBAAN,CAA2BF,IAA3B,EAAiC,KAAjC,EAAwCF,IAAxC;AACAd,IAAAA,IAAI;AACL,GA/BkB,CAiCnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD;;AAED,SAASV,IAAT","sourcesContent":["import Tone from 'tone'\n\n// function seq1(synth) {\n//   let seq = new Tone.Sequence(\n//     function(time, note) {\n//       console.log(time, note)\n//       //straight quater notes\n//       synth.triggerAttackRelease(note, '10hz', time)\n//     },\n//     ['A0 C1 E0', 'F5 A5 C5', 'G5 B5 D5', 'D5 F5 A5', 'E5 G5 B5']\n//   )\n//   return seq\n// }\n\nconsole.clear()\nfunction seq1(synth) {\n  ///var started = false;\n  // document.documentElement.addEventListener('mousedown', () => {\n  //   if (started) return;\n  //   started = true;\n\n  const $inputs = document.querySelectorAll('input'),\n    chords = ['A0 C1 E1', 'F0 A0 C1', 'G0 B0 D1', 'D0 F0 A0', 'E0 G0 B0'].map(\n      formatChords\n    )\n  console.log(chords)\n  var chordIdx = 0,\n    step = 0\n\n  Array.from($inputs).forEach($input => {\n    $input.addEventListener('change', () => {\n      if ($input.checked) handleChord($input.value)\n    })\n  })\n\n  function handleChord(valueString) {\n    chordIdx = parseInt(valueString) - 1\n  }\n\n  Tone.Transport.scheduleRepeat(onRepeat, '16n')\n\n  function onRepeat(time) {\n    let chord = chords[chordIdx],\n      note = chord[step % chord.length]\n    synth.triggerAttackRelease(note, '16n', time)\n    step++\n  }\n\n  //   // DOWN THE LINE THIS WILL MAKE THINGS EASIER\n  //   function formatChords(chordString) {\n  //     let chord = chordString.split(' ');\n  //     let arr = [];\n  //     for (let i = 0; i < 2; i++) {\n  //       for (let j = 0; j < chord.length; j++) {\n  //         let noteOct = chord[j].split(''),\n  //             note = noteOct[0];\n  //         let oct = (noteOct[1] === '0') ? i + 4 : i + 5;\n  //         note += oct;\n  //         arr.push(note);\n  //       }\n  //     }\n  //     return arr;\n  //   }\n  // });\n}\n\nexport { seq1 }\n"]},"metadata":{},"sourceType":"module"}