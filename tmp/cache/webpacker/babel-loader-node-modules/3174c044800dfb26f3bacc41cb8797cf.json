{"ast":null,"code":"import Tone from 'tone';\n\nfunction distortion() {\n  var f = new Tone.Distortion({\n    distortion: 0,\n    oversample: 'none'\n  });\n  f.wet.value = 0;\n  return f;\n}\n\nfunction tremolo() {\n  var f = new Tone.Tremolo({\n    frequency: 10,\n    type: 'sine',\n    depth: 100,\n    spread: 180\n  });\n  f.wet.value = 0;\n  return f;\n}\n\nfunction feedbackDelay() {\n  var f = new Tone.FeedbackDelay({\n    delayTime: '8n',\n    maxDelay: 10\n  });\n  f.wet.value = 0;\n  return f;\n}\n\nfunction autoFilter() {\n  var f = new Tone.AutoFilter({\n    frequency: 1,\n    type: 'sine',\n    depth: 1,\n    baseFrequency: 20,\n    octaves: 4.6,\n    filter: {\n      type: 'lowpass',\n      rolloff: -12,\n      Q: 1\n    }\n  });\n  f.wet.value = 0;\n  return f;\n}\n\nfunction autoPanner() {\n  var f = new Tone.AutoPanner({\n    frequency: 1,\n    type: 'square',\n    depth: 1\n  });\n  f.wet.value = 0;\n  return f;\n}\n\nfunction autoWah() {\n  var f = new Tone.AutoWah({\n    baseFrequency: 100,\n    octaves: 6,\n    sensitivity: 0,\n    Q: 2,\n    gain: 2,\n    follower: {\n      attack: 0.3,\n      release: 0.5\n    }\n  });\n  f.wet.value = 0;\n  return f;\n}\n\nfunction bitCrusher() {\n  var f = new Tone.BitCrusher({\n    bits: 0\n  });\n  f.wet.value = 0;\n  return f;\n}\n\nfunction chebyshev() {\n  var f = new Tone.Chebyshev({\n    order: 1,\n    oversample: 'none'\n  });\n  f.wet.value = 0;\n  return f;\n}\n\nfunction chorus() {\n  var f = new Tone.Chorus({\n    frequency: 1.5,\n    delayTime: 3.5,\n    depth: 0.7,\n    type: 'sine',\n    spread: 180\n  });\n  f.wet.value = 0;\n  return f;\n}\n\nfunction convolver() {\n  var f = new Tone.Convolver({\n    onload: Tone.noOp,\n    normalize: true\n  });\n  f.wet.value = 0;\n  return f;\n}\n\nfunction feedbackEffect() {\n  var f = new Tone.FeedbackEffect({\n    feedback: 0.125\n  });\n  f.wet.value = 0;\n  return f;\n} // let effect = new Tone.Effect({\n//   wet: 1\n// })\n\n\nfunction freeverb() {\n  var f = new Tone.Freeverb({\n    roomSize: 0.7,\n    dampening: 3000\n  });\n  f.wet.value = 0;\n  return f;\n}\n\nfunction jcReverb() {\n  var f = new Tone.JCReverb({\n    roomSize: 0.5\n  });\n  f.wet.value = 0;\n  return f;\n}\n\nfunction phaser() {\n  var f = new Tone.Phaser({\n    frequency: 0,\n    octaves: 1,\n    stages: 10,\n    Q: 10,\n    baseFrequency: 350\n  });\n  f.wet.value = 0;\n  return f;\n}\n\nfunction pingPongDelay() {\n  var f = new Tone.PingPongDelay({\n    delayTime: 0.01,\n    maxDelayTime: 1\n  });\n  f.wet.value = 0;\n  return f;\n}\n\nfunction pitchShift() {\n  var f = new Tone.PitchShift({\n    pitch: 0,\n    windowSize: 0.1,\n    delayTime: 0,\n    feedback: 0\n  });\n  f.wet.value = 0;\n  return f;\n}\n\nfunction reverb() {\n  var f = new Tone.Reverb({\n    decay: 1.5,\n    preDelay: 0.01\n  });\n  f.wet.value = 0;\n  return f;\n}\n\nfunction stereoWidener() {\n  var f = new Tone.StereoWidener({\n    width: 0.5\n  });\n  f.wet.value = 0;\n  return f;\n}\n\nfunction vibrato() {\n  var f = new Tone.Vibrato({\n    maxDelay: 0.005,\n    frequency: 5,\n    depth: 0.1,\n    type: 'sine'\n  });\n  f.wet.value = 0;\n  return f;\n}\n\nexport { autoFilter, autoPanner, autoWah, bitCrusher, chebyshev, chorus, convolver, distortion, feedbackDelay, feedbackEffect, freeverb, jcReverb, phaser, pingPongDelay, pitchShift, reverb, stereoWidener, tremolo, vibrato };","map":{"version":3,"sources":["/Users/bitterglaze/Share/hseadc2017_THEREMINVOX/app/javascript/components/tunes/effects.js"],"names":["Tone","distortion","f","Distortion","oversample","wet","value","tremolo","Tremolo","frequency","type","depth","spread","feedbackDelay","FeedbackDelay","delayTime","maxDelay","autoFilter","AutoFilter","baseFrequency","octaves","filter","rolloff","Q","autoPanner","AutoPanner","autoWah","AutoWah","sensitivity","gain","follower","attack","release","bitCrusher","BitCrusher","bits","chebyshev","Chebyshev","order","chorus","Chorus","convolver","Convolver","onload","noOp","normalize","feedbackEffect","FeedbackEffect","feedback","freeverb","Freeverb","roomSize","dampening","jcReverb","JCReverb","phaser","Phaser","stages","pingPongDelay","PingPongDelay","maxDelayTime","pitchShift","PitchShift","pitch","windowSize","reverb","Reverb","decay","preDelay","stereoWidener","StereoWidener","width","vibrato","Vibrato"],"mappings":"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","sourcesContent":["import Tone from 'tone'\n\nfunction distortion() {\n  let f = new Tone.Distortion({\n    distortion: 0,\n    oversample: 'none'\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\nfunction tremolo() {\n  let f = new Tone.Tremolo({\n    frequency: 10,\n    type: 'sine',\n    depth: 100,\n    spread: 180\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\nfunction feedbackDelay() {\n  let f = new Tone.FeedbackDelay({\n    delayTime: '8n',\n    maxDelay: 10\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\nfunction autoFilter() {\n  let f = new Tone.AutoFilter({\n    frequency: 1,\n    type: 'sine',\n    depth: 1,\n    baseFrequency: 20,\n    octaves: 4.6,\n    filter: {\n      type: 'lowpass',\n      rolloff: -12,\n      Q: 1\n    }\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\nfunction autoPanner() {\n  let f = new Tone.AutoPanner({\n    frequency: 1,\n    type: 'square',\n    depth: 1\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\nfunction autoWah() {\n  let f = new Tone.AutoWah({\n    baseFrequency: 100,\n    octaves: 6,\n    sensitivity: 0,\n    Q: 2,\n    gain: 2,\n    follower: {\n      attack: 0.3,\n      release: 0.5\n    }\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\nfunction bitCrusher() {\n  let f = new Tone.BitCrusher({\n    bits: 0\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\nfunction chebyshev() {\n  let f = new Tone.Chebyshev({\n    order: 1,\n    oversample: 'none'\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\nfunction chorus() {\n  let f = new Tone.Chorus({\n    frequency: 1.5,\n    delayTime: 3.5,\n    depth: 0.7,\n    type: 'sine',\n    spread: 180\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\nfunction convolver() {\n  let f = new Tone.Convolver({\n    onload: Tone.noOp,\n    normalize: true\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\nfunction feedbackEffect() {\n  let f = new Tone.FeedbackEffect({\n    feedback: 0.125\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\n// let effect = new Tone.Effect({\n//   wet: 1\n// })\n\nfunction freeverb() {\n  let f = new Tone.Freeverb({\n    roomSize: 0.7,\n    dampening: 3000\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\nfunction jcReverb() {\n  let f = new Tone.JCReverb({\n    roomSize: 0.5\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\nfunction phaser() {\n  let f = new Tone.Phaser({\n    frequency: 0,\n    octaves: 1,\n    stages: 10,\n    Q: 10,\n    baseFrequency: 350\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\nfunction pingPongDelay() {\n  let f = new Tone.PingPongDelay({\n    delayTime: 0.01,\n    maxDelayTime: 1\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\nfunction pitchShift() {\n  let f = new Tone.PitchShift({\n    pitch: 0,\n    windowSize: 0.1,\n    delayTime: 0,\n    feedback: 0\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\nfunction reverb() {\n  let f = new Tone.Reverb({\n    decay: 1.5,\n    preDelay: 0.01\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\nfunction stereoWidener() {\n  let f = new Tone.StereoWidener({\n    width: 0.5\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\nfunction vibrato() {\n  let f = new Tone.Vibrato({\n    maxDelay: 0.005,\n    frequency: 5,\n    depth: 0.1,\n    type: 'sine'\n  })\n\n  f.wet.value = 0\n\n  return f\n}\n\nexport {\n  autoFilter,\n  autoPanner,\n  autoWah,\n  bitCrusher,\n  chebyshev,\n  chorus,\n  convolver,\n  distortion,\n  feedbackDelay,\n  feedbackEffect,\n  freeverb,\n  jcReverb,\n  phaser,\n  pingPongDelay,\n  pitchShift,\n  reverb,\n  stereoWidener,\n  tremolo,\n  vibrato\n}\n"]},"metadata":{},"sourceType":"module"}